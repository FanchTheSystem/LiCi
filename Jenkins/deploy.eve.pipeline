pipeline {
    agent any

    parameters {
        string(defaultValue: '5.6', description: 'Version of Php', name: 'phpVersion')
        choice(choices: 'php\nphp-fpm', description: 'Mod Php', name: 'phpMod')
        string(defaultValue: 'E-venement', description: 'Project Name', name: 'Project')
        string(defaultValue: 'master', description: 'Git  Branch Name', name: 'Branch')
        string(defaultValue: 'eve-standard', description: 'Git Branch Name for configuration file', name: 'ConfBranch')
        string(defaultValue: 'master', description: 'Name of the deploiement, will change the target directory or serveur', name: 'Name')
        string(defaultValue: 'ci.libre-informatique.fr', description: 'Base Url', name: 'apacheUrl')
        choice(choices: 'false\ntrue', description: '', name: 'CreateArchive')
     }

    environment {
        apachePort = sh(returnStdout: true, script: "echo 8`echo ${params.phpMod} | tr '-' ' ' | wc -w`${params.phpVersion} | sed -e s/'\\.'//g").trim()
        Target = "$HOME/public_html/${params.Project}/${params.Branch}/${params.Name}"
        DockerTarget = "/home/jenkins/public_html/${params.Project}/${params.Branch}/${params.Name}"
        ETCDHOST = 'etcd.host'
    }

    options {
        timeout(time: 1, unit: 'HOURS')
        timestamps()
        disableConcurrentBuilds()
        ansiColor('xterm')
    }

    stages {
        stage ('Set Name and Description') {
            steps {
                script {
                    currentBuild.displayName = "#${BUILD_NUMBER} Deploy: ${params.Branch} (${params.ConfBranch}) With ${params.phpMod}/${params.phpVersion}"
                    currentBuild.description = "<a href='http://${params.apacheUrl}:${env.apachePort}/~jenkins/${params.Project}/${params.Branch}/${params.Name}/web'>Link To Instance</a>"
                }
            }
        }

        stage ('Check & Prepare Apache') {
            steps {
                sh "docker exec -u root apache-${params.phpMod}-cnt-${params.phpVersion} service apache2 status"
                sh "docker exec -u jenkins:www-data apache-${params.phpMod}-cnt-${params.phpVersion} mkdir -p ${env.DockerTarget}"
            }
        }

        stage ('Prepare Env') {
            steps {
                sh "Target=${env.Target} Project=${params.Project} Name=${params.Name} Branch=${params.Branch}_${params.ConfBranch} sg www-data ./Scripts/set_prefix.sh"
                sh "Target=${env.Target} PhpVersion=${params.phpVersion} ApacheTargetPath=${env.DockerTarget} sg www-data ./Scripts/set_etcd_env.sh"
            }
        }

        stage ('Deploy Archive ') {
            steps {
                sh "Target=${env.Target} Branch=${params.Branch} Project=${params.Project} sg www-data ./Scripts/deploy_archive.sh"
                sh "docker exec -u jenkins:www-data apache-${params.phpMod}-cnt-${params.phpVersion} chmod -R 775 ${env.DockerTarget}/"
            }
        }

        stage ('Set Config File') {
            steps {
                sh "Target=${env.Target} Branch=${params.ConfBranch} sg www-data ./Scripts/apply_conf.sh"
                sh "Target=${env.Target} DockerTarget=${env.DockerTarget} sg www-data ./Scripts/launch_confd.sh"
            }
        }

        stage ('Create Database') {
            steps {
                sh "docker exec -u jenkins:www-data -w ${env.DockerTarget}/ apache-${params.phpMod}-cnt-${params.phpVersion} bin/ci-scripts/set_pgpass_test.sh"
                sh "docker exec -u jenkins:www-data -w ${env.DockerTarget}/ apache-${params.phpMod}-cnt-${params.phpVersion} bin/ci-scripts/create_database_test.sh"
                sh "docker exec -u jenkins:www-data -w ${env.DockerTarget}/ apache-${params.phpMod}-cnt-${params.phpVersion} bin/ci-scripts/install_db_test.sh"
                sh "docker exec -u jenkins:www-data -w ${env.DockerTarget}/ apache-${params.phpMod}-cnt-${params.phpVersion} bin/ci-scripts/load_fixture_test.sh"
            }
        }

        stage ('Symfony cc') {
            steps {
                sh "docker exec -u jenkins:www-data -w ${env.DockerTarget}/ apache-${params.phpMod}-cnt-${params.phpVersion} ./symfony cc"
            }
        }

        stage ('Archive Gzip') {
            when {
                expression { params.CreateArchive == 'true' }
            }

            steps {
                sh "Source=${env.Target} Project=${params.Project} Branch=${params.Branch}_${params.ConfBranch} Name=${params.Name} sg www-data ./Scripts/gen_archive.sh"
            }
        }


    }
    post {
        always {
            cleanWs()

        }
    }
}
