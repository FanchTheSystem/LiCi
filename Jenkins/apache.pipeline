pipeline {
    agent any

    parameters {
        string(defaultValue: '7.1', description: 'Version of Php', name: 'phpVersion')
    }

    environment {
        apachePort = sh(returnStdout: true, script: "echo 80${params.phpVersion} | sed -e s/'\\.'//g").trim()
     }

    options {
        timeout(time: 1, unit: 'HOURS')
        timestamps()
        disableConcurrentBuilds()
    }

    stages {
        stage ('Prepare') {
            steps {
                sh "mkdir -p ${HOME}/public_html"
            }
        }

        stage ('Stop') {
            steps {
                sh "docker container stop apache-cnt-${params.phpVersion} || echo ok"
                sh "docker container rm apache-cnt-${params.phpVersion} || echo ok"
            }
        }

        stage ('Build') {
            steps {
                sh "docker build --build-arg PHPVER=${params.phpVersion} --build-arg UID=$(id -u) --build-arg GID=$(id -g) -t apache-img-${params.phpVersion} -f Docker/apache.dockerfile ."
            }
        }

        stage ('Run') {
            steps {
                sh "docker run -dit -p ${env.apachePort}:80 --network=ci.network  --volume ${HOME}/public_html:/home/jenkins/public_html --memory-swappiness 0 --name apache-cnt-${params.phpVersion} apache-img-${params.phpVersion}"
            }
        }

        stage ('Status') {
            steps {
                sh "docker exec -u root apache-cnt-${params.phpVersion} sleep 3 # wait apache restarting (in previous docker run)"
                sh "docker exec -u root apache-cnt-${params.phpVersion} service apache2 status"
                sh "docker exec -u root apache-cnt-${params.phpVersion} php --version"
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
