pipeline {
    agent  any


    parameters {
        string(defaultValue: 'pialab', description: '', name: 'GlobalName')

        string(defaultValue: 'http://ci.libre-informatique.fr:8042/front', description: '', name: 'FrontUrl')
        string(defaultValue: 'http://ci.libre-informatique.fr:8042/back', description: '', name: 'BackUrl')

        string(defaultValue: '/usr/share/pialab-back/public', description: '', name: 'BackDirectory')

        string(defaultValue: '/etc/ssl/pialab.crt', description: '', name: 'BackSSLCertificateFile')
        string(defaultValue: '/etc/ssl/pialab.key', description: '', name: 'BackSSLCertificateKeyFile')
        string(defaultValue: '/etc/ssl/pialab.pem', description: '', name: 'BackSSLCertificateChainFile')

        string(defaultValue: '/usr/share/pialab/dist', description: '', name: 'FrontDirectory')

        string(defaultValue: '/etc/ssl/pialab.crt', description: '', name: 'FrontSSLCertificateFile')
        string(defaultValue: '/etc/ssl/pialab.key', description: '', name: 'FrontSSLCertificateKeyFile')
        string(defaultValue: '/etc/ssl/pialab.pem', description: '', name: 'FrontSSLCertificateChainFile')

        string(defaultValue: 'test', description: '', name: 'BuildEnv')

        string(defaultValue: '', description: 'Leave Empty For Default Value', name: 'DatabaseName')
        string(defaultValue: '', description: 'Leave Empty For Default Value', name: 'DatabaseUser')
        string(defaultValue: '', description: 'Leave Empty For Random', name: 'DatabasePassword')

        string(defaultValue: '', description: 'Leave Empty For Default Value', name: 'DatabaseHost')
        string(defaultValue: '', description: 'Leave Empty For Default Value', name: 'DatabaseRootUser')
        string(defaultValue: '', description: 'Leave Empty For Default Value', name: 'DatabaseRootPassword')

        string(defaultValue: 'smtp://127.0.0.1:1025', description: '', name: 'MailerUrl')

        /* string(defaultValue: 'master', description: '', name: 'BackGitBranch') */

        string(defaultValue: '', description: 'Leave Empty For Random', name: 'ClientId')
        string(defaultValue: '', description: 'Leave Empty For Random', name: 'ClientSecret')

        string(defaultValue: 'master', description: '', name: 'FrontGitBranch')
        string(defaultValue: 'master', description: '', name: 'BackGitBranch')

    }

    environment {
        BuildTag = sh(returnStdout: true, script: "openssl rand -hex 8").trim()
        ClientId= sh(returnStdout: true, script: "[ -n \"${params.ClientId}\" ] && echo \"${params.ClientId}\" || openssl rand -hex 24").trim()
        ClientSecret= sh(returnStdout: true, script: "[ -n \"${params.ClientSecret}\" ] && echo \"${params.ClientSecret}\" || openssl rand -hex 24").trim()
        DatabasePassword= sh(returnStdout: true, script: "[ -n \"${params.DatabasePassword}\" ] && echo \"${params.DatabasePassword}\" || openssl rand -hex 8").trim()
    }


    options {
        timeout(time: 1, unit: 'HOURS')
        timestamps()
        disableConcurrentBuilds()
        ansiColor('xterm')
    }

    stages {
        stage ('Create Back Archive') {
            steps {
                build job: "PiaLab/pialab-back/${params.BackGitBranch}",  parameters: [
                    string(value: "${params.GlobalName}-${env.BuildTag}-back",  name: 'GlobalName'),
                    string(value: "${params.FrontUrl}", name: 'FrontUrl'),

                    string(value: "${params.BackDirectory}", name: 'BackDirectory'),
                    string(value: "${params.BackSSLCertificateFile}", name: 'BackSSLCertificateFile'),
                    string(value: "${params.BackSSLCertificateKeyFile}", name: 'BackSSLCertificateKeyFile'),
                    string(value: "${params.BackSSLCertificateChainFile}", name: 'BackSSLCertificateChainFile'),

                    string(value: "${params.DatabaseName}", name: 'DatabaseName'),
                    string(value: "${params.DatabaseUser}", name: 'DatabaseUser'),
                    string(value: "${env.DatabasePassword}", name: 'DatabasePassword'),

                    string(value: "${params.DatabaseHost}", name: 'DatabaseHost'),
                    string(value: "${params.DatabaseRootUser}", name: 'DatabaseRootUser'),
                    string(value: "${params.DatabaseRootPassword}", name: 'DatabaseRootPassword'),

                    string(value: "${params.MailerUrl}", name: 'MailerUrl'),


                    string(value: "${params.BuildEnv}", name: 'BuildEnv'),
                    string(value: "${env.ClientId}", name: 'ClientId'),
                    string(value: "${env.ClientSecret}", name: 'ClientSecret'),
                    string(value: 'false', name: 'RunTest'),
                    string(value: 'private', name: 'Repo')
                ], wait: true
            }

        }

        stage ('Create Front Archive') {
            steps {
                build job: "PiaLab/pialab/${params.FrontGitBranch}",  parameters: [
                    string(value: "${params.GlobalName}-${env.BuildTag}-front",  name: 'GlobalName'),
                    string(value: "${params.BackUrl}", name: 'BackUrl'),

                    string(value: "${params.FrontDirectory}", name: 'FrontDirectory'),
                    string(value: "${params.FrontSSLCertificateFile}", name: 'FrontSSLCertificateFile'),
                    string(value: "${params.FrontSSLCertificateKeyFile}", name: 'FrontSSLCertificateKeyFile'),
                    string(value: "${params.FrontSSLCertificateChainFile}", name: 'FrontSSLCertificateChainFile'),

                    string(value: "${params.BuildEnv}", name: 'BuildEnv'),
                    string(value: "${env.ClientId}", name: 'ClientId'),
                    string(value: "${env.ClientSecret}", name: 'ClientSecret'),
                    string(value: 'false', name: 'RunTest'),
                    string(value: 'private', name: 'Repo')
                ], wait: true
            }

        }
    }

   post {
        always {
            cleanWs()
        }
    }

}
