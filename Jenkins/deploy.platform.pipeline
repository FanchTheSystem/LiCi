pipeline {
    agent any

    parameters {
        string(defaultValue: '7.1', description: 'Version of Php', name: 'phpVersion')
        choice(choices: 'php\nphp-fpm', description: 'Mod Php', name: 'phpMod')
        string(defaultValue: 'Platform', description: 'Project Name', name: 'Project')
        string(defaultValue: 'master', description: 'Git(or job) Branch Name', name: 'Branch')
        string(defaultValue: 'master', description: 'Name of the deploiement, may change the target directory or serveur', name: 'Name')
        string(defaultValue: 'seti.libre-informatique.fr', description: 'Base Url', name: 'apacheUrl')
    }

    environment {
        apachePort = sh(returnStdout: true, script: "echo 8`echo ${params.phpMod}| tr '-' ' ' | wc -w`${params.phpVersion} | sed -e s/'\\.'//g").trim()
        Suffix = sh(returnStdout: true, script: "echo ${params.Name} |sed -e s/-/_/g|tr '[:upper:]' '[:lower:]'").trim()
        Prefix = sh(returnStdout: true, script: "echo /${params.Project}/dev/${params.Branch} |sed -e s/-/_/g|tr '[:upper:]' '[:lower:]'").trim()
        Target = "$HOME/public_html/${params.Project}"
        /* May not be the same as on host */
        DockerTarget="/home/jenkins/public_html/${params.Project}"
        ETCDHOST = 'etcd.host'
    }

    options {
        timeout(time: 1, unit: 'HOURS')
        timestamps()
        disableConcurrentBuilds()
        ansiColor('xterm')
    }

    stages {
        stage ('Set Name and Description') {
            steps {
                script {
                    currentBuild.displayName = "#${BUILD_NUMBER} Deploy: ${params.Branch} With ${params.phpMod}/${params.phpVersion}"
                    currentBuild.description = "<a href='http://${params.apacheUrl}:${env.apachePort}/~jenkins/${params.Project}/${params.Name}/web/sil'>Link To Instance</a>"
                }
            }
        }

        stage ('Check & Prepare Apache') {
            steps {
                sh "docker exec -u root apache-${params.phpMod}-cnt-${params.phpVersion} service apache2 status"
                /* todo : maybe remove user dir and use real apache vhost */
                sh "docker exec -u jenkins:www-data apache-${params.phpMod}-cnt-${params.phpVersion} mkdir -p ${env.DockerTarget}/${params.Name}"
                /* todo : should use user www-data to deploy */
                sh "docker exec -u root -w ${env.DockerTarget}/${params.Name}/ apache-${params.phpMod}-cnt-${params.phpVersion} rm -rf var/cache/ var/logs/"
                sh "docker exec -u jenkins:www-data apache-${params.phpMod}-cnt-${params.phpVersion} mkdir -p ${env.DockerTarget}/${params.Name}/cache ${env.DockerTarget}/${params.Name}/logs"
                }
        }

        stage ('Prepare Env') {
            steps {
                sh "Project=${params.Project} Name=${params.Name} PhpVersion=${params.phpVersion} sg www-data ./Scripts/set_etcd_env.sh"
           }
        }

        stage ('Deploy Archive ') {
            steps {
                sh "Target=${env.Target} Branch=${params.Branch} Project=${params.Project} Name=${params.Name} Url=${params.apacheUrl} sg www-data ./Scripts/deploy_platform_archive.sh"
                /* todo : maybe remove user dir and use real apache vhost */
                /* sh "docker exec -u root apache-${params.phpMod}-cnt-${params.phpVersion} chown -R jenkins:www-data ${env.DockerTarget}/${params.Name}" */
                /* todo : maybe remove user dir and use real apache vhost */
                sh "docker exec -u jenkins:www-data apache-${params.phpMod}-cnt-${params.phpVersion} chmod -R 775 ${env.DockerTarget}/${params.Name}"
            }
        }

        stage ('Set Config File') {
            steps {
                sh "docker exec -u jenkins:www-data -w ${env.DockerTarget}/${params.Name}/ confd.host confd -onetime -backend etcdv3 -node http://${env.ETCDHOST}:2379 -confdir ./etc/confd -log-level debug -prefix $Prefix"
           }
        }

        /* Todo should check if database exist in some kind of prod scripts*/
        stage ('Create Database') {
            steps {
                sh "docker exec -u jenkins:www-data -w ${env.DockerTarget}/${params.Name}/ apache-${params.phpMod}-cnt-${params.phpVersion} bin/ci-scripts/set_pgpass_test.sh"
                sh "docker exec -u jenkins:www-data -w ${env.DockerTarget}/${params.Name}/ apache-${params.phpMod}-cnt-${params.phpVersion} bin/ci-scripts/create_database_test.sh"
                sh "docker exec -u jenkins:www-data -w ${env.DockerTarget}/${params.Name}/ apache-${params.phpMod}-cnt-${params.phpVersion} bin/console cache:clear --env=prod # May be Needed after parameter update"
                sh "docker exec -u jenkins:www-data -w ${env.DockerTarget}/${params.Name}/ apache-${params.phpMod}-cnt-${params.phpVersion} bin/ci-scripts/install_db_test.sh"
                /* run a cache clear on env test to allow debug on deployed instance */
                /* sh "docker exec -u jenkins:www-data -w ${env.DockerTarget}/${params.Name}/ apache-${params.phpMod}-cnt-${params.phpVersion} bin/console cache:clear --env=test" */
                sh "docker exec -u jenkins:www-data -w ${env.DockerTarget}/${params.Name}/ apache-${params.phpMod}-cnt-${params.phpVersion} bin/console cache:clear --env=prod"
           }
        }
    }
    post {
        always {
            cleanWs()

        }
    }
}
