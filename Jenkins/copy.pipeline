pipeline {
    agent any

    parameters {
        string(defaultValue: 'Platform/master', description: 'Job Name', name: 'Job')
        string(defaultValue: 'Platform', description: 'Project Name', name: 'Project')
        string(defaultValue: 'master', description: 'Git(or job) Branch Name', name: 'Branch')
        /* warning need LIREPOPATH set on jenkins host */
        string(defaultValue: '${LIREPOPATH}/public', description: 'Repository Directory', name: 'Repo')
        choice(choices: 'false\ntrue', description: '', name: 'DoDeploy')
    }

    options {
        timeout(time: 1, unit: 'HOURS')
        timestamps()
        disableConcurrentBuilds()
        ansiColor('xterm')
    }

    stages {
        stage ('Set Name') {
            steps {
                script {
                    currentBuild.displayName = "#${BUILD_NUMBER} Copy ${params.Project} (${params.Branch})"
                }
            }
        }

        stage ('Prepare') {
            steps {
                sh "mkdir -p ${params.Repo}/${params.Project}"
            }
        }

        stage('Copy From Job') {
            steps {
                script {
                    step ([$class: 'CopyArtifact',
                           projectName: "${params.Job}",
                           filter: "*",
                           target: "./Artifact"]);
                }
            }
        }

        stage('Copy To Repo') {
            steps {
                sh  "sg www-data 'cp -r ./Artifact/* ${params.Repo}/${params.Project}/'"
            }
        }

        stage ('Clean') {
            steps {
                sh "ls -lrt ${params.Repo}/${params.Project}"
                sh "ls -t ${params.Repo}| head -n3 # add a rm for file not in list"
            }
        }

        stage ('Deploy') {
            when {
                // Only say hello if a "greeting" is requested
                expression { params.DoDeploy == 'true' }
            }

            steps {
                build job: "Deploy ${params.Project}", parameters: [string(name: 'Project', value: "${params.Project}"), string(name: 'Branch', value: "${params.Branch}"), string(name: 'Name', value: "${params.Branch}")], wait: false
            }
        }


    }

    post {
        always {
            cleanWs()
        }
    }
}
